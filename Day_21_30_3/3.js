//49. Explain the concept of the event loop and the call stack in JavaScript. How does JavaScript handle asynchronous code execution? In JavaScript, the event loop manages the execution of code, handling both synchronous and asynchronous operations. The call stack stores function calls and executes them in a Last In, First Out (LIFO) order. When asynchronous code (e.g., setTimeout, promises) is encountered, it’s offloaded to the callback queue once its execution context is ready. The event loop continuously checks the call stack and moves tasks from the callback queue to the stack when it’s empty, allowing asynchronous code to run without blocking the main thread.

//The call stack (kitchen) is where the immediate work is done (synchronous code). The callback queue (waiting orders) is where things that need to wait go (asynchronous tasks).The event loop (waiter) ensures that when the kitchen is free, it brings in the waiting orders from the callback queue to be processed.
